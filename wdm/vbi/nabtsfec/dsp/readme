Installation notes:
Create a new directory and unpack the tar file into it.  Three sub-directories
will be created, of which 'nabtsdsp' is the interesting one.  Move to 
that directory.

You will need to do type 'make install' to create the program 
(coincidently called 'nt'), but before that will work you will
need to make sure that two programs are available in your
path.  One of these, 'protos', is a script, and the other, 'mkptypes',
is an executable.  Both are to be found in the nabtsdsp directory,
and you can either include this directory in your PATH environment
variable or more them to a directory that is already included.
After they are findable (you can check using the `which` command),
run 'make install' to build the nt program, and you should be on your
way.  (You can ignore all the warning messages).


Release Notes:
========================================================================
Release 5/28/97:

The FEC and DSP modules currently build under UNIX and are believed to
be portable to MSVC.  We apologize that we didn't have time to test
under MSVC in the rush to get out the door.

See "Makefile" for how the files go together to make the two modules.

"nabtsapi.h" contains the latest set of API calls for the DSP and FEC
modules.  See below for examples (test harnesses) which use these
modules.

-------------

"Release notes" for the current DSP code 5/28/97:

There is a simple example of the use of the DSP in testdsp.c.  This is
a program which reads raw samples, 1536 bytes at a time, from files
such as testdsp?.in.  The output is a hex dump of decoded lines out
stdout.  See the makefile for how to run an actual regression test.

Note that future version of the DSP will likely change the output
slightly from the current output.  All the regression tests can really
do right now is verify that the DSP code was compiled correctly.

You can #define NDSP_MALLOC and NDSP_FREE while compiling nabtsdsp.c
to cause nabtsdsp.c to call alternate versions of malloc and free.

-------------

"Release notes" for the current FEC code 5/28/97:

There is an example of the use of the FEC in testfec.c.  This is a
program which reads packets from a file (such as testfec1.dec) and
prints the decoded packets to stdout.  

There are two sample sets:
testfec1.dec: The correct output from testfec1.dec is testfec1.ok.
testfec1.dec contains the same bundle three times in a row, with
different errors inserted each time.

testfec2.dec: The correct output from testfec2.dec is testfec2.ok.
testfec2.dec contains the same bundle as testfec1.dec, but with no
errors.  You should be able to change a few bytes in testfec2.dec, or
even delete one or two lines, without changing the output.

The functionality of NFECStateSetGroupAddrs is not yet implemented;
the FEC will always pay attention to all group addresses.  (There is a
stub for this routine.)

You will need to modify host.h to include appropriate #define's for
alloc_mem and free_mem in the !linux case.
