ISSUES:

Allocator should provide long-message buffers
    Need to update COM interface

SysEx messages
    Unpacker must be rewritten to deal with structured/unstructured.
    Use package bit for SysEx messages!!!
    Need to deal with unstructured format
    Should buffer be freed in Allocator?  
  RESOLUTION
    Yes, it should.  This should be explicit in the spec that a message
    (including the sysex buffer) should not be touched after it is Put().

DPC synchronization between IRP submit/timers/capture PutMsg: shared spinlock.
    We need a shared spinlock, even if we don't do kernel THRU.
    (remember multi-proc can run DPCs concurrently -- even the same one)
    Also, 
        Should we offer built-in timer callbacks on the clock?  
        They could get the spinlock when they register for this callback.
        Or should we wrap the spinlock into the callback itself?
    RESOLUTION
        No, DX8 for the callbacks (external MXFs).

State changes in the graph?
      The IRPs have already been completed successfully, so data can't be flushed.
      Miniport does get alert of state change, though, so it might try to block the data
    RESOLUTION
      Graph never changes state -- clients sets pin directly to RUN upon pin open.
  
    Need to add property on pin to flush sequencer events (and MP events?)

NOT DONE
__________

DONE

Port stuff from PortCls.h and KSMedia.h over to DMusicKS.h

Check in PortCls.h, KSMedia.h, DMusicKS.h changes
Check in INF changes
Check in placefil to add dmus_mpu.sys and .inf to the build
Check in latest dmusic drop

Clock implementation
        running clock versus presentation time and KS clock
        should IRPs have correct presentation time in KS header, or IRefClk time?
    RESOLUTION:
        DMusic.dll will pass a clock to the filter, before the pins are created.  
        They will know to grab the clock from the filter.  The pins will be put 
        in KSSTATE_RUN as soon as they are created, and never stopped.  In this
        way the KS clock imitates an IRefClk.
    No work required on my side

Chains of messages
    Am I handling them correctly?
        Sequencer looks OK
        Miniport (assumes they are in order, probably OK)
        Allocator looks OK
        Packer looks OK

PortCls/SequencerMXF need to use Ks clock specified by user mode client

Pin formats
    Get multiple formats working with render (add KSMUSICFORMAT)
    Limit KSMUSICFORMAT pins to one per miniport (1 each direction)

Capture
        shared buffer scheme?  
    RESOLUTION
        We can do this after regular IRP stuff is working.

Miniports need port method for how far in advance to give msgs (SequencerMXF)

Pin formats
    Get multiple formats working with capture (add KSMUSICFORMAT)

Extensibility of DMUS_K_EVT?  cbStruct alonside cbEvent?
    Would be easy to have 
        WORD    cbStruct
        WORD    cbEvent
        WORD    usChannelGroup
        WORD    fFlags
        ULONGLONG ullPresTime ...
